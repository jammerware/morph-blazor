@using System.Net
@using MorphShared.Models
@using MorphShared.Services
@using MudBlazor

@inject IApiService Api
@inject IClipboardService Clipboard

<PageTitle>@Decomposition?.Word?.L1 | Morph</PageTitle>

<div class="word-component">
    @if (IsLoading)
    {
        <MorphLoading>
            <OperationDescription>Looking up <strong>@Word?.ToLower()</strong>...</OperationDescription>
            <Details>
                Don't worry if this takes awhile. Morph is (gratefully) hosted on free servers at
                <a href="https://heroku.com" target="_blank" class="text-link">Heroku</a>. The downside of this is that the app goes
                to sleep if it isn't used for awhile, so it takes it a bit to wake up. If you look up more words in the next
                15 minutes or so, Morph will be much faster 👍🏻
            </Details>
        </MorphLoading>
    }
    else {
        <div>
            <div class="header-wrap">
                <div class="search-button-wrap">
                    <a href="/">
                        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                            <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                        </MudHidden>
                        <MudHidden Breakpoint="Breakpoint.SmAndDown" Invert="true">
                            <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                        </MudHidden>
                    </a>
                </div>

                <div class="title-wrap">
                    <MorphPageTitle>
                        <span class="word">@Decomposition?.Word?.L1?.ToLower()</span>
                        <span class="pinyin">(@Decomposition?.Word?.Pinyin)</span>
                    </MorphPageTitle>
                </div>
            </div>
        </div>

        <MudDivider />
        @if(Decomposition?.Characters != null)
        {
            <div class="character-decompositions">
                @foreach (var character in Decomposition.Characters)
                {
                    <MorphCharacterCard Decomposition="character" />
                }
            </div>
        }
        <MudDivider />
        
        <div class="button-wrap">

            @if(Decomposition?.Word?.Translation != null)
            {
                <MudTooltip Text="Copy characters">
                    <MudIconButton 
                        OnClick="() => OnCopyClicked(Decomposition.Word.Translation)"
                        Icon="@Icons.Material.Filled.FileCopy"
                        Color="Color.Primary"
                        Size="Size.Medium" />
                </MudTooltip>
            }

            @if (Decomposition?.Word?.Pinyin != null)
            {
                <MudTooltip Text="Copy Pinyin">
                    <MudIconButton 
                        OnClick="() => OnCopyClicked(Decomposition.Word.Pinyin)"
                        Icon="@Icons.Material.Filled.ContentCopy"
                        Color="Color.Primary"
                        Size="Size.Medium" />
                </MudTooltip>
            }

            @if (Decomposition?.Word?.L1 != null)
            {
                <MudTooltip Text="View on Google Translate">
                    <MudIconButton 
                        Href="@($"https://translate.google.com/?sl=en&tl=zh-CN&text={WebUtility.UrlEncode(Decomposition.Word.L1)}&op=translate")"
                        Target="_blank"
                        Icon="@Icons.Material.Filled.Translate"
                        Color="Color.Primary"
                        Size="Size.Medium" />
                </MudTooltip>
            }
            
            <MudTooltip Text="Share">
                <MudIconButton 
                    OnClick="OnShareClicked"
                    Icon="@Icons.Material.Filled.Share"
                    Color="Color.Primary"
                    Size="Size.Medium" />
            </MudTooltip>
        </div>
    }
</div>

@code {
    [Parameter]
    public string? Word { get; set; }

    [Parameter]
    public EventCallback<ShareEventArgs> OnShare { get; set; }

    private WordDecomposition? Decomposition { get; set; }
    private bool IsLoading { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Word == null)
        {
            throw new ArgumentException($"{nameof(MorphWord)} requires a word argument.");
        }

        if (Decomposition?.Word?.L1 != Word)
        {
            this.IsLoading = true;
            StateHasChanged();

            this.Decomposition = await this.Api.GetWordDecomposition(Word);
            this.IsLoading = false;
            StateHasChanged();
        }

    }

    private async Task OnCopyClicked(string text)
    {
        await Clipboard.Copy(text);
    }

    private async Task OnShareClicked()
        => await this.OnShare.InvokeAsync(new ShareEventArgs($"https://morphwasm.azurewebsites.net/word/{this.Word}"));
}
