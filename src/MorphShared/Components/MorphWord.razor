@using MorphShared.Models
@using MorphShared.Services
@using MudBlazor

@inject IApiService Api

<PageTitle>@Decomposition?.Word?.L1 | Morph</PageTitle>

<div class="word-component">
    @if (Decomposition == null)
    {
        <MorphLoading>
            <OperationDescription>Looking up <strong>@Word?.ToLower()</strong>...</OperationDescription>
            <Details>
                Don't worry if this takes awhile. Morph is (gratefully) hosted on free servers at
                <a href="https://heroku.com" target="_blank" class="text-link">Heroku</a>. The downside of this is that the app goes
                to sleep if it isn't used for awhile, so it takes it a bit to wake up. If you look up more words in the next
                15 minutes or so, Morph will be much faster 👍🏻
            </Details>
        </MorphLoading>
    }
    else {
        <div>
            <div class="header-wrap">
                <div class="search-button-wrap">
                    <a href="/">
                        <MudIconButton Icon="@Icons.Material.Filled.Search" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" />
                    </a>
                </div>
                <MorphPageTitle>
                    <span class="word">@Decomposition.Word?.L1?.ToLower()</span>
                    <span class="pinyin">(@Decomposition.Word?.Pinyin)</span>
                </MorphPageTitle>
            </div>
        </div>

        <MudDivider />
        @if(Decomposition.Characters != null)
        {
            <div class="character-decompositions">
                @foreach (var character in Decomposition.Characters)
                {
                    <MorphCharacterCard Decomposition="character" />
                }
            </div>
        }
        <MudDivider />
    }
</div>

@code {
    [Parameter]
    public string? Word { get; set; }
    private WordDecomposition? Decomposition { get; set; }

    protected async override Task OnInitializedAsync()
    {
        if (Word == null) {
            throw new ArgumentException($"{nameof(MorphWord)} requires a word argument.");
        }

        this.Decomposition = await this.Api.GetWordDecomposition(Word);
        StateHasChanged();
    }
}
